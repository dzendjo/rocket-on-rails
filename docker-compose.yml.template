version: "3.7"
services:
  traefik:
    image: "traefik:2.0"
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.network=service"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge=true"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.letsencrypt.acme.email=email-for-certificate"
      - "--certificatesResolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--api.dashboard=true"
      - "--api.insecure=true"
    environment:
      - CF_API_EMAIL=cloudflare-email
      - CF_API_KEY=cloudflare-api-key
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/traefik/acme/:/etc/traefik/acme/
    ports:
      - "80:80"
      - "443:443"
    networks:
      - service
    restart: on-failure

  bot:
    build: .
    container_name: bot
    env_file:
      - app.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.service_name.rule=Host(`host-in-cloudflare`)
      - traefik.http.routers.service_name.entrypoints=websecure
      - traefik.http.routers.service_name.tls.certresolver=letsencrypt
      - traefik.http.services.service_name.loadbalancer.server.port=8080
    networks:
      - service
    restart: on-failure

  mongo:
    image: mongo
    container_name: mongo
    env_file:
      - db.env
    volumes:
        - /data/db:/data/db
    networks:
      - service
    restart: on-failure
    ports:
      - "27017:27017"

networks:
  service:
